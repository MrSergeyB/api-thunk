{"ast":null,"code":"import { ADD_INPUT, SET_LOADING, GET_INPUTS, DELETE_INPUT, EDIT_INPUT, SET_CURRENT, INPUTS_ERROR } from \"./types\";\nconst http = \"http://localhost:7070/api/services/\"; // GET INPUTS\n\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`);\n    const data = await res.json();\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // ADD NEW INPUT\n\nexport const addInput = (name, price, description) => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        price,\n        description\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; //DELETE INPUT\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`${http}:${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; //SET CURRENT\n\nexport const setCurrent = (input, dispatch) => {\n  dispatch({\n    type: SET_CURRENT,\n    payload: input\n  });\n}; // Update  input on server\n\nexport const editInput = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}/:${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-redux/client/src/actions/inputActions.js"],"names":["ADD_INPUT","SET_LOADING","GET_INPUTS","DELETE_INPUT","EDIT_INPUT","SET_CURRENT","INPUTS_ERROR","http","getInputs","dispatch","setLoading","res","fetch","data","json","type","payload","err","addInput","name","price","description","method","body","JSON","stringify","headers","deleteInput","id","setCurrent","input","editInput"],"mappings":"AAAA,SACEA,SADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,YAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,YAPF,QAQO,SARP;AAUA,MAAMC,IAAI,GAAG,qCAAb,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,IAAK,EAAT,CAAvB;AAEA,UAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,YADC;AAEPU,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,WAAd,KAA8B,MAAOZ,QAAP,IAAoB;AACxE,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,IAAK,EAAT,EAAY;AACjCe,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA,IAAD;AAAOC,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAAf,CAF2B;AAGjCK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHwB,KAAZ,CAAvB;AAOA,UAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,SADC;AAEPgB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAhBD,CAgBE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,YADC;AAEPU,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID;AACF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMU,WAAW,GAAIC,EAAD,IAAQ,MAAOnB,QAAP,IAAoB;AACrD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAME,KAAK,CAAE,GAAEL,IAAK,IAAGqB,EAAG,EAAf,EAAkB;AAC3BN,MAAAA,MAAM,EAAE;AADmB,KAAlB,CAAX;AAIAb,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEZ,YADC;AAEPa,MAAAA,OAAO,EAAEY;AAFF,KAAD,CAAR;AAID,GAXD,CAWE,OAAOX,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,YADC;AAEPU,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID;AACF,CAlBM,C,CAoBP;;AACA,OAAO,MAAMY,UAAU,GAAG,CAACC,KAAD,EAAQrB,QAAR,KAAqB;AAC7CA,EAAAA,QAAQ,CAAC;AAACM,IAAAA,IAAI,EAAEV,WAAP;AAAoBW,IAAAA,OAAO,EAAEc;AAA7B,GAAD,CAAR;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMC,SAAS,GAAIH,EAAD,IAAQ,MAAOnB,QAAP,IAAoB;AACnD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEL,IAAK,KAAIqB,EAAG,EAAhB,EAAmB;AACxCN,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,EAFkC;AAGxCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAH+B,KAAnB,CAAvB;AAQA,UAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEX,UADC;AAEPY,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAjBD,CAiBE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,YADC;AAEPU,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID;AACF,CAxBM,C,CA0BP;;AACA,OAAO,MAAMP,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLK,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  ADD_INPUT,\n  SET_LOADING,\n  GET_INPUTS,\n  DELETE_INPUT,\n  EDIT_INPUT,\n  SET_CURRENT,\n  INPUTS_ERROR,\n} from \"./types\";\n\nconst http = \"http://localhost:7070/api/services/\";\n\n// GET INPUTS\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`);\n\n    const data = await res.json();\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// ADD NEW INPUT\nexport const addInput = (name, price, description) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({name, price, description}),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n//DELETE INPUT\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`${http}:${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n//SET CURRENT\nexport const setCurrent = (input, dispatch) => {\n  dispatch({type: SET_CURRENT, payload: input});\n};\n\n// Update  input on server\nexport const editInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}/:${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}