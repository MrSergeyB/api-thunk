{"ast":null,"code":"// Get inputs from server\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/api/services\");\n    const data = await res.json();\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Add new log\n\nexport const addInput = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Delete log from server\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Update log on server\n\nexport const updateInput = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/logs/${log.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-redux/client/src/actions/inputActions.js"],"names":["getInputs","dispatch","setLoading","res","fetch","data","json","type","GET_INPUTS","payload","err","INPUTS_ERROR","response","statusText","addInput","log","method","body","JSON","stringify","headers","ADD_LOG","LOGS_ERROR","deleteInput","id","DELETE_LOG","updateInput","UPDATE_LOG","SET_LOADING"],"mappings":"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","sourcesContent":["// Get inputs from server\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/api/services\");\n    const data = await res.json();\n\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Add new log\nexport const addInput = (log) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_LOG,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Delete log from server\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_LOG,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Update log on server\nexport const updateInput = (log) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`/logs/${log.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}