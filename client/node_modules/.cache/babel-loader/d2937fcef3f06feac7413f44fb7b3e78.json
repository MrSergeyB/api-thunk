{"ast":null,"code":"import { ADD_INPUT, SET_LOADING, GET_INPUTS, DELETE_INPUT, EDIT_INPUT, SET_CURRENT, INPUTS_ERROR } from \"./types\";\nconst http = \"http://localhost:7070/api/services/\"; // GET INPUTS\n\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`);\n    const data = await res.json();\n    console.log(data);\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // ADD NEW INPUT\n\nexport const addInput = (name, price, content) => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        price,\n        content\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; //DELETE INPUT\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`http://localhost:7070/api/serviced/:${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; //SET CURRENT\n\nexport const setCurrent = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}${id}`);\n    const data = await res.json();\n    dispatch({\n      type: SET_CURRENT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // EDIT INPUR\n\nexport const editInput = (id, name, price, content) => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        id,\n        name,\n        price,\n        content\n      }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-redux/client/src/actions/inputActions.js"],"names":["ADD_INPUT","SET_LOADING","GET_INPUTS","DELETE_INPUT","EDIT_INPUT","SET_CURRENT","INPUTS_ERROR","http","getInputs","dispatch","setLoading","res","fetch","data","json","console","log","type","payload","err","addInput","name","price","content","method","body","JSON","stringify","headers","deleteInput","id","setCurrent","editInput","Accept"],"mappings":"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","sourcesContent":["import {\n  ADD_INPUT,\n  SET_LOADING,\n  GET_INPUTS,\n  DELETE_INPUT,\n  EDIT_INPUT,\n  SET_CURRENT,\n  INPUTS_ERROR,\n} from \"./types\";\n\nconst http = \"http://localhost:7070/api/services/\";\n\n// GET INPUTS\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`);\n\n    const data = await res.json();\n    console.log(data);\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// ADD NEW INPUT\nexport const addInput = (name, price, content) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({name, price, content}),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n//DELETE INPUT\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`http://localhost:7070/api/serviced/:${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n//SET CURRENT\nexport const setCurrent = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}${id}`);\n    const data = await res.json();\n\n    dispatch({\n      type: SET_CURRENT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// EDIT INPUR\nexport const editInput = (id, name, price, content) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({id, name, price, content}),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}