{"ast":null,"code":"import { SET_LOADING, GET_INPUTS, DELETE_INPUT, EDIT_INPUT, SET_CURRENT, INPUTS_ERROR } from \"./types\";\nconst http = \"http://localhost:7070/api/services/\"; // GET INPUTS\n\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}`);\n    const data = await res.json();\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n};\n{}\n/*\n// ADD NEW INPUT\nexport const addInput = (name, price, content) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify({name, price, content}),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n*/\n//DELETE INPUT\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`${http}:${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; //SET CURRENT\n\nexport const setCurrent = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${http}${id}`);\n    const data = await res.json();\n    dispatch({\n      type: SET_CURRENT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // EDIT INPUT\n\nexport const editInput = (id, name, price, content) => async dispatch => {\n  const editedInput = {\n    id,\n    name,\n    price,\n    content\n  };\n\n  try {\n    setLoading();\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedInput),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: EDIT_INPUT,\n      payload: editedInput\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-thunk/client/src/actions/inputActions.js"],"names":["SET_LOADING","GET_INPUTS","DELETE_INPUT","EDIT_INPUT","SET_CURRENT","INPUTS_ERROR","http","getInputs","dispatch","setLoading","res","fetch","data","json","type","payload","err","deleteInput","id","method","setCurrent","editInput","name","price","content","editedInput","body","JSON","stringify","headers","Accept"],"mappings":"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","sourcesContent":["import {\n  SET_LOADING,\n  GET_INPUTS,\n  DELETE_INPUT,\n  EDIT_INPUT,\n  SET_CURRENT,\n  INPUTS_ERROR,\n} from \"./types\";\n\nconst http = \"http://localhost:7070/api/services/\";\n\n// GET INPUTS\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`);\n\n    const data = await res.json();\n\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n{\n  /*\n  // ADD NEW INPUT\n  export const addInput = (name, price, content) => async (dispatch) => {\n    try {\n      setLoading();\n  \n      const res = await fetch(`${http}`, {\n        method: \"POST\",\n        body: JSON.stringify({name, price, content}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await res.json();\n  \n      dispatch({\n        type: ADD_INPUT,\n        payload: data,\n      });\n    } catch (err) {\n      dispatch({\n        type: INPUTS_ERROR,\n        payload: err,\n      });\n    }\n  };\n*/\n}\n\n//DELETE INPUT\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`${http}:${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n//SET CURRENT\nexport const setCurrent = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}${id}`);\n    const data = await res.json();\n\n    dispatch({\n      type: SET_CURRENT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// EDIT INPUT\nexport const editInput = (id, name, price, content) => async (dispatch) => {\n  const editedInput = {id, name, price, content};\n  try {\n    setLoading();\n\n    const res = await fetch(`${http}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedInput),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: EDIT_INPUT,\n      payload: editedInput,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}