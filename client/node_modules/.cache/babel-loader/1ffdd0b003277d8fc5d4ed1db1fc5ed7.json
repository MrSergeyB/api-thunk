{"ast":null,"code":"import { ADD_INPUT, SET_LOADING, GET_INPUTS, DELETE_INPUT, EDIT_INPUT, ADD_EDITED_INPUTS, INPUTS_ERROR } from \"./types\"; //Set loading\n\nexport const addEditedInputs = (id, task, price) => ({\n  type: \"ADD_EDITED_INPUTS\",\n  id,\n  task,\n  price\n}); // Get inputs from server\n\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/api/services\");\n    const data = await res.text().then(console.log(dats));\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err\n    });\n  }\n}; // Add new log\n\nexport const addInput = (task, price, description) => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        task,\n        price,\n        description\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Delete log from server\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Update log on server\n\nexport const editInput = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`//${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response\n    });\n  }\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-redux/client/src/actions/inputActions.js"],"names":["ADD_INPUT","SET_LOADING","GET_INPUTS","DELETE_INPUT","EDIT_INPUT","ADD_EDITED_INPUTS","INPUTS_ERROR","addEditedInputs","id","task","price","type","getInputs","dispatch","setLoading","res","fetch","data","text","then","console","log","dats","payload","err","addInput","description","method","body","JSON","stringify","headers","json","response","statusText","deleteInput","editInput"],"mappings":"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","sourcesContent":["import {\n  ADD_INPUT,\n  SET_LOADING,\n  GET_INPUTS,\n  DELETE_INPUT,\n  EDIT_INPUT,\n  ADD_EDITED_INPUTS,\n  INPUTS_ERROR,\n} from \"./types\";\n\n//Set loading\nexport const addEditedInputs = (id, task, price) => ({\n  type: \"ADD_EDITED_INPUTS\",\n  id,\n  task,\n  price,\n});\n\n// Get inputs from server\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/api/services\");\n    const data = await res.text().then(console.log(dats));\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err,\n    });\n  }\n};\n\n// Add new log\nexport const addInput = (task, price, description) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify({task, price, description}),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Delete log from server\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_INPUT,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Update log on server\nexport const editInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`//${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: EDIT_INPUT,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}