{"ast":null,"code":"//Set loading\nexport const handleDelete = id => ({\n  type: \"REMOVE_INPUT\",\n  id\n});\nexport const handleEdit = id => ({\n  type: \"EDIT_INPUT\",\n  id\n});\nexport const addEditedInputs = (id, task, price) => ({\n  type: \"ADD_EDITED_INPUTS\",\n  id,\n  task,\n  price\n}); // Get inputs from server\n\nexport const getInputs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/api/services\");\n    const data = await res.json();\n    dispatch({\n      type: GET_INPUTS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Add new log\n\nexport const addInput = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Delete log from server\n\nexport const deleteInput = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Update log on server\n\nexport const updateInput = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/logs/${log.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set current input\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n}; // Clear current log\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/blokhinsergey/Desktop/StudyIt/React/netology/api-redux/client/src/actions/inputActions.js"],"names":["handleDelete","id","type","handleEdit","addEditedInputs","task","price","getInputs","dispatch","setLoading","res","fetch","data","json","GET_INPUTS","payload","err","INPUTS_ERROR","response","statusText","addInput","log","method","body","JSON","stringify","headers","ADD_LOG","LOGS_ERROR","deleteInput","DELETE_LOG","updateInput","UPDATE_LOG","setCurrent","SET_CURRENT","clearCurrent","CLEAR_CURRENT","SET_LOADING"],"mappings":"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","sourcesContent":["//Set loading\n\nexport const handleDelete = (id) => ({\n  type: \"REMOVE_INPUT\",\n  id,\n});\n\nexport const handleEdit = (id) => ({\n  type: \"EDIT_INPUT\",\n  id,\n});\n\nexport const addEditedInputs = (id, task, price) => ({\n  type: \"ADD_EDITED_INPUTS\",\n  id,\n  task,\n  price,\n});\n\n// Get inputs from server\nexport const getInputs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/api/services\");\n    const data = await res.json();\n\n    dispatch({\n      type: GET_INPUTS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: INPUTS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Add new log\nexport const addInput = (log) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_LOG,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Delete log from server\nexport const deleteInput = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_LOG,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Update log on server\nexport const updateInput = (log) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(`/logs/${log.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Set current input\nexport const setCurrent = (log) => {\n  return {\n    type: SET_CURRENT,\n    payload: log,\n  };\n};\n\n// Clear current log\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT,\n  };\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}